{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-ethan-jps-individual-repository","title":"Welcome to Ethan JP's Individual Repository","text":"<p>Here you will find details about my subcomponent for team 308. I will be working on the team's sensor</p>"},{"location":"Component%20selection/","title":"Component selection","text":"<p>Component Selection for Weather Monitoring System 1. Major Component Selections</p> <p>Humidity and Temperature sensor component selection</p> <p>Solution Pros Cons HDC1010YPAR HDC1010YPAR</p> <p>Surface mount link to product $1.4 each</p> <p>High accuracy (\u00b10.2\u00b0C, \u00b12% RH), Low power consumption, I2C interface, Compact SMD package Higher cost than basic sensors DHT22</p> <p>Through-hole link to product $6.5 I2C, Wide availability, Easy to interface Larger size, Lower accuracy, expensive, Slower response time, through- hole, will have to make it surface-mount capable. SHT31</p> <p>Surface mount Link $2.4 High precision, I2C, Factory calibrated, large voltage range, visually pleasing and compact design. Requires careful PCB design, seems like the same specs as the HDC, slightly more expensive than the HDC. Choice: Option 1, the HDC1010YPAR humidity and temperature sensor Rationale: The HDC1010YPAR was chosen due to its high accuracy, low power consumption, and I2C compatibility with the ESP32 microcontroller. Datasheet: PDF Product page: Link Microcontroller Selection Solution Pros Cons ESP32-S3-WROOM-1-N4 (Selected) esp32 c3 risc v nodemcu board</p> <p>Link $ 3.50 Dual-core processor, Low power consumption, Integrated Wi-Fi and Bluetooth, Rich GPIO support More complex than simpler MCUs, Requires proper firmware development PIC18F47Q10 Microchip PIC18F47Q10-I/P PIC Microcontroller MCU, PIC18, 40-Pin PDIP</p> <p>link to product $1.5 Low cost, Simple to use, Industrial Reliability No integrated Wi-Fi/Bluetooth, Limited computational power, no I2C STM32F103</p> <p>link to product $4.07</p> <p>High-performance ARM Cortex-M3, Large community support No native Wi-Fi, Higher power consumption, price Rationale: The ESP32-S3-WROOM-1-N4 was chosen for its integrated Wi-Fi, Bluetooth, and low power consumption, making it ideal for remote weather monitoring. Later on in Power Consumption, you may view how the 3.3V consumption will have to taken in consideration. This will use an LDO.</p> <p>2. Microcontroller Pin Allocation HDC1010YPAR Pin ESP32-S3 Pin Description SDA GPIO 8 (default) I2C Data Line (Can be reassigned to any GPIO) SCL GPIO 9 (default) I2C Clock Line (Can be reassigned to any GPIO) VCC 3.3V or 5V Power Supply (Ensure logic level compatibility) GND GND Ground Connection ADR GND (0x40) or VCC (0x41) I2C Address Selection Peripheral Pin(s) Allocated Notes Power and Ground 3.3V, GND Required for all components UART (Communication with teammates) TX: GPIO1, RX: GPIO3 Default UART pins I2C (HDC1010YPAR Sensor) SCL: GPIO22, SDA: GPIO21 Required for I2C communication SPI (Optional, if needed for other sensors) PICO: GPIO13, POCI: GPIO12, CS: GPIO14 Only if using SPI peripherals ADC (Analog Sensors, if needed) ADC1_CH0 (GPIO1), ADC1_CH3 (GPIO4) Example pins for ADC functionality DAC (If needed for audio output) DAC1 (GPIO25), DAC2 (GPIO26) Built-in DACs on ESP32 PWM (LED control or motor control) GPIO5, GPIO18 Can be used for indicators General GPIO (Buttons, Indicators, etc.) GPIO16, GPIO17 Configurable for general use ESP 32 Table:</p> <p>ESP Info Answer Comments Model ESP32-S3-WROOM-1-N4 This is the part number Product Page URL Link Found on Espressif.com ESP32-S3-WROOM-1-N4 Datasheet URL Link Do not paste links directly into the table. Use a link ESP32 S3 Datasheet URL Link to download</p> <p>Has more detail on functions ESP32 S3 Technical Reference Manual URL ESP32-S3 Technical Reference Manual Has details on I/O multiplexing, USB, and others Vendor link Digi-Key Product Page Digikey, Jameco, etc. Do not paste links directly into the table. Use a link Code Examples ESP-IDF Examples URL(s) for libraries on GitHub or other sites related to the microcontroller and your planned peripherals External Resources URL(s) Link to resources page Search on Google and YouTube for other resources for each specific microcontroller. Unit cost Approximately $3.50 USD Find on Digi-Key, Jameco, MPJA, or Octopart Absolute Maximum Current for the entire IC 500 mA Find in the microcontroller datasheet Supply Voltage Range Min: 3.0 V / Nominal: 3.3 V / Max: 3.6 V / Absolute Max: 3.6 V Min / Nominal / Max / Absolute Max, as found in datasheet Maximum GPIO current (per pin) 40 mA As found in datasheet Supports External Interrupts? Yes As found in datasheet Required Programming Hardware, Cost, URL USB-to-UART Bridge, approximately $10, Example As found in datasheet Module # Available Needed Associated Pins (or * for any) UART 2 1 GPIO1 (TX), GPIO3 (RX) external SPI* 2 1 GPIO18 (SCK), GPIO23 (MOSI), GPIO19 (MISO), GPIO5 (CS) I2C 2 1 GPIO21 (SDA), GPIO22 (SCL) GPIO 36 10 * ADC 20 1 GPIO34 LED PWM 16 1 * Motor PWM 16 1 * USB Programmer 1 1 GPIO19 (D-), GPIO20 (D+)</p> <p>Description on role in the team: I am working on the sensor. This project was largely inspired by this working example of a weather monitoring system: link. The system will use a 3.3V supply for my part in the team and use I2C communication with the ESP32. I used the I2C communication for a sensor last semester so I am somewhat familiar with how it works, although I am not used to the ESP32 nor does the worked-out example have it to be used. Another problem was that I could not use the DHT11, however, after looking at the datasheet of the DHT11, I found that the only major difference technically between my two devices was that the DHT was more expensive and had a measuring supply current of 980 \u00b5W instead of 220 \u00b5W. This will make me have to design the voltage and current supply accordingly by using a low-dropout (LDO) regulator or a buck converter to provide a stable 3.3V supply from the main power source. Additionally, I will verify that the power rail can supply at least the maximum operating current of the sensor, accounting for any potential inrush currents. A current-limiting resistor or a precision power supply with current regulation can help prevent overcurrent damage. Finally, I will confirm proper voltage levels using a multimeter and check signal integrity with an oscilloscope if necessary.</p> <p>Error Checking &amp; Pin Availability * Enough Pins? Yes, the ESP32 has sufficient GPIOs to accommodate all necessary peripherals. * Conflicts? I2C and UART do not share pins, ensuring proper communication. * Power Requirements? The ESP32 provides 3.3V output, which matches the HDC1010YPAR's voltage requirement.</p> <p>Final Microcontroller Choice &amp; Rationale Microcontroller Selected: ESP32-S3-WROOM-1-N4 Rationale: * Adequate I/O: Sufficient GPIOs to handle all peripherals, including I2C, UART, ADC, PWM, and GPIO. * Wireless Capabilities: Includes Wi-Fi and Bluetooth, which could be useful for future expansion. * Low Power Consumption: Suitable for battery-powered weather monitoring applications. * Strong Software Support: Compatible with ESP-IDF, Arduino, and MicroPython. * Community and Documentation: Extensive online resources for troubleshooting and development. Next Steps * Test I2C communication with the HDC1010YPAR sensor using ESP-IDF or Arduino. * Validate power supply stability using a multimeter.</p> <p>3. Power Budget Calculation Component Voltage Range (V) Typical Voltage (V) Max Current Power (mW) ESP32-S3-WROOM-1-N4 (LDO Regulator required) 3.0V - 3.6V 3.3V 200mA 660mW</p> <p>HDC1010YPAR 2.7V - 5.5V 3.3V 20mA 66mW Total (maximum) Power Consumption  - 3.3V 240mA 726mW</p> <p>4. Final Microcontroller Selection &amp; Rationale The ESP32-S3-WROOM-1-N4 is optimal due to its low power consumption, integrated communication (Wi-Fi/Bluetooth), and robust GPIO options. This selection ensures reliable performance and efficient integration with all sensors and peripherals. It is also highly compatible for the sensor part of the team's circuit. Due to the I2C communication, it may communicate with the ESP32 and carry the same voltage 3.3V. I would need to use pull-up resistors around some parts of the sensor and ensure correct amperage using these sensors as well. 5. Power Source &amp; Voltage Regulator Selection</p> <p>I need to ensure that this part receives the correct amperage. Due to the team planning to use 5V instead of 3.3V for this side of the circuit we then have two choices. These choices are to either use 3.3V for the whole board or to use an LDO, since it is a minimal change of 1.7V we hope that this LDO regulator may work in reducing the voltage running through my devices. I will have to construct a circuit that regualates the voltage similar to the voltage regulator lab we finished in class. Solution Pros Cons LDO Regulator AMS1117-3.3V (Selected) Simple, Readily available, Low noise Higher heat dissipation Switching Regulator LM2596-3.3V High efficiency, Low heat generation Bulkier, Requires additional components Rationale: The AMS1117-3.3V was chosen for its simplicity and ease of implementation in a low-power embedded system. 6. Conclusion This component selection ensures an efficient, low-power, and scalable design for a weather monitoring system using an ESP32-S3-WROOM-1-N4 and HDC1010YPAR temperature and humidity sensor.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}