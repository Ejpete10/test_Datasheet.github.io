{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-ethan-jps-individual-repository","title":"Welcome to Ethan JP's Individual Repository","text":""},{"location":"#use-the-drop-down-menu-on-the-top-left-of-your-screen-to-select-page-to-view","title":"Use the drop-down menu on the top left of your screen to select page to view","text":"<p>Here you may find details about my subcomponent for team 308. I will be working on the team's sensor.</p> <p>Link to the team website</p>"},{"location":"BOM/","title":"BOM for Sensor","text":""},{"location":"BOM/#below-is-the-materials-that-are-desired-to-be-implemented-in-the-sensor-portion-of-our-teams-system","title":"Below is the materials that are desired to be implemented in the sensor portion of our team's system.","text":"<p>BOM spreadsheet: Link to spreadsheet</p> <p>Purchase slip: Download PDF of Purchase Slip</p> <p>You may access the links mentioned in the image if you use the link. This is a large BOM and may be more accessible by viewing the Spreadsheet itself.</p> <p></p> <p></p>"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#title-block-diagram","title":"title: Block Diagram","text":"<p>Below is the block diagram. It is meant to give an overview of what components will be used in the system and how it may communicate with the teammates designs. In this block diagram, I wanted to detail how multiple perspectives where accounted for in the design of this humidity and temperature subsystem. </p> <p></p>"},{"location":"Component%20selection/","title":"Component selection","text":""},{"location":"Component%20selection/#component-selection-for-weather-monitoring-system","title":"Component Selection for Weather Monitoring System","text":""},{"location":"Component%20selection/#part-1-major-component-selections","title":"Part 1: Major Component Selections","text":"<p>If you wish to view on PDF click here.</p> <p>Humidity and Temperature sensor component selection </p> <p>Links:</p> <p>SHT31</p> <p>DH22</p> <p>HDC1010YPAR</p> <p>Choice: Option 1, the HDC1010YPAR humidity and temperature sensor</p> <p>Rationale: The HDC1010YPAR was chosen due to its high accuracy, low power consumption, and I2C compatibility with the ESP32 microcontroller. Datasheet: PDF Product page: Link</p> <p>Microcontroller Selection</p> <p></p> <p>Links:</p> <p>ESP32</p> <p>Pic18</p> <p>STM32</p> <p>Choice: Option 2 PIC18F47Q10 microcontroller</p> <p>Rationale: The PIC18F47Q10 was chosen for its reliability, simplicity, and cost-effectiveness in an industrial setting. You may view how the 3.3V consumption will have to be considered. This will use an LDO. </p> <p>That is all for the devices that communicate. I also chose to add a debugging LED that goes from my RE3 pin on my PIC to the Snap programmer header pins, here are the details on this. Part Name - Blue Micro LED\u00ae SMD LED</p> <p>Specifications:</p> <p>Voltage Range: 1.8V - 3.6V</p> <p>Typical Voltage: 2.0V</p> <p>Max Current: 20mA</p> <p>Power: 40mW</p> <p>Package Size: 0603, 0805, 1206, etc.</p> <p>Colors Available: Red, Green, Blue, Yellow, White</p> <p>You can find more details and the datasheet here </p> <p>Product link</p> <p>If you wish to view the whole BOM you may visit the link to my BOM spreadsheet: BOM</p>"},{"location":"Component%20selection/#part-2-microcontroller-pin-allocation","title":"Part 2. Microcontroller Pin Allocation","text":"<p>It may be helpful to go to view the pin layout on schematic if you wish Layout</p> <p>I previously selected esp32 but now I switched to PIC, here is the following information regarding the PIC.</p> ESP Info Answer Model PIC18F47Q10 Product Page URL link Datasheet URL(s) link Application Notes URL(s) link Vendor link link Code Examples link External Resources URL(s) link Unit cost ~$3.00 Absolute Maximum Current for entire IC 250 mA Supply Voltage Range 1.8V / 3.3V / 5.0V / 5.5V Maximum GPIO current (per pin) 25 mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL PICkit 4 (~$50) link Works with MPLabX? Yes Works with Microchip Code Configurator? Yes Module # Available Needed Associated Pins (or * for any) GPIO 36 4 RB1-RB4 ADC 35 0 * UART 2 2 RC3, RC4 SPI 2 0 * I2C 2 2 RD6, RD7 PWM 2 0 * ICSP 1 1 RE3 <p>Comment: This microcontroller meets my needs and allows me to connect the necessary pins for my components that I will be using to ensure I can read humidity and temperature and send them to my teammates. For further information, you may view Image A below that details what the microcontroller looks like and what pins are being used in my subsystem. As you can see, I had additional pins I used as headers, I did not detail them in the needed section as they are not necessarily needed but are useful if I find out later on in the creation of my system that a teammate would like to access my microcontroller or if something goes wrong in wiring. I like to attempt to be as prepared as possible for this difficult task.</p> <p></p> <p>Image A: My Microcontroller pins</p> <p>Description of role in the team: I am working on the sensor. This project was largely inspired by this working example of a weather monitoring system: link. The system will use a 3.3V supply for my part in the team and use I2C communication with the ESP32. I used the I2C communication for a sensor last semester so I am somewhat familiar with how it works, I am starting to familiarize myself with how the PIC18F47Q10 works although not 100% familiar with its software and communication styles, it is something that I am learning in this class. Another problem was that I could not use the DHT11, however, after looking at the datasheet of the DHT11, I found that the only major difference technically between my two devices was that the DHT was more expensive and had a measuring supply current of 980 \u00b5W instead of 220 \u00b5W. This will require me to design the voltage and current supply accordingly by using a low-dropout (LDO) regulator or a buck converter to provide a stable 3.3V supply from the main power source. Additionally, I will verify that the power rail can supply at least the maximum operating current of the sensor, accounting for any potential inrush currents. A current-limiting resistor or a precision power supply with current regulation can help prevent overcurrent damage. Finally, I will confirm proper voltage levels using a multimeter and check signal integrity with an oscilloscope if necessary.</p> <p>Error Checking &amp; Pin Availability</p> <p>Enough Pins? Yes, the PIC has sufficient GPIOs to accommodate all necessary peripherals.</p> <p>Conflicts? I2C and UART do not share pins, ensuring proper communication.</p> <p>Power Requirements? The PIC accepts 3.3V input, which matches the HDC1010YPAR\u2019s voltage requirement.</p> <p>Final Microcontroller Choice &amp; Rationale</p> <p>Microcontroller Selected: PIC18F47Q10</p> <p>Rationale:</p> <p>Adequate I/O: Sufficient GPIOs to handle all peripherals. Wireless Capabilities: n/a. My system was switched from using the esp32 to now PIC due to programming concerns. Low Power Consumption: Suitable for battery-powered weather monitoring applications. Strong Software Support: Compatible with ESP-IDF, Arduino, and MicroPython. Community and Documentation: Extensive online resources for troubleshooting and development.</p> <p>Next Steps</p> <p>Test I2C communication with the HDC1010YPAR sensor using PIC. Validate power supply stability using a multimeter.</p>"},{"location":"Component%20selection/#power-budget-calculation","title":"Power Budget Calculation","text":"<p>I have a total of two major components I will be working with, the microcontroller and the sensor that consume the most power. However I have attempted at including other components that may consume power to run the current through.</p> <p></p>"},{"location":"Component%20selection/#section-b-assigning-my-components-to-a-power-rail","title":"Section B assigning my components to a power rail.","text":"<p>For my components they will all be running off of 3.3V. The only part that will not is the female to male headers in the daisy chain which do not necessarily consume power, they will run off of the 9V power line which is shared across the team. So yes, all of my major components are 3.3V power rail due to the safety margin of 25% I will need a fuse of around 200mA. This may be seen in the schematic. </p> <p></p> <p>Image B fuse of 200mA to ensure that the PIC does not exceed maximum current. </p> <p>In the case of the humidity sensor, the amperage that is being sent around is what it means by the low amperage. In my design review I talked to a representative from microchip to ensure that my schematic will work given my components as I try to make a keen point about not frying any equipment. </p>"},{"location":"Component%20selection/#section-c-the-power-regulator","title":"Section C, The Power Regulator.","text":"<p>I will be using the AP63203WU-7 LDO, this is further explained in the power source and voltage regulator section. I had to go through multiple LDOs to ensure that I have something reliable. In my LAB that we did to find a 3.3V output using an LDO my classmates told me that I should not use that LDO because one it is not surface mount and two it is not a guaranteed 3.3V output. I need as close to 3.3V and something reliable that is surface mount for which is why I choose this component given the options. </p>"},{"location":"Component%20selection/#section-d-the-external-power-supply","title":"Section D, the external power supply.","text":"<p>In a past project I also needed a 9V power supply to then regulate for whatever voltage I needed to power my component. I used the peralta labs #0930 9V unregulated power supply. I can then plug this into its 694108301002 Wurth Electronics, which has 5.5mm outer diameter and 2.5mm inner diameter barrel connector.</p>"},{"location":"Component%20selection/#final-microcontroller-selection-rationale","title":"Final Microcontroller Selection &amp; Rationale","text":"<p>The PIC18F47Q10 is optimal due to its low power consumption, industrial reliability, and robust GPIO options. This selection ensures reliable performance and efficient integration with all sensors and peripherals. It is also highly compatible for the sensor part of the team\u2019s circuit. Due to the I2C communication, it may communicate with the PIC18F47Q10 and carry the same voltage 3.3V. I would need to use pull-up resistors around some parts of the sensor and ensure correct amperage using these sensors as well. </p>"},{"location":"Component%20selection/#further-commentary-regarding-the-compatibility-of-the-pic-to-be-used-to-program-my-system","title":"Further Commentary regarding the compatibility of the PIC to be used to program my system.","text":"<p>When I began my research on trying to find a suitable project for this class, I run across this:  https://srituhobby.com/how-to-make-a-weather-monitoring-system-with-esp32-board/.</p> <p>Although this project emphasis the use of the esp32 board, I can still prgram the sensor with the pic and allow a teammate to use a esp32 to then read the information it is sending off, due to this, I wanted to ensure that the information that my board receives will be able to be sent off to the necessary team member, in this case Sanjit who is working on the HMI. This is why I  initially wanted to use the esp32 board but due to fulfilling the requirements of this project, I decided to take one for the team and use the PIC in order for us to use a PIC in this project. I can use I2C to read the data and then UART to send or a GPIO for my teammates to also attach to my system as needed, this PIC still does the job either way. The wifi and bluetooth I will leave to a teammate while ensuring they may access my information of the PIC. I will now also ensure that when I send in my BOM that I order extra PICs in case mine does not work for any reason, the BOM is linked in this document as well if you wish to access it.</p>"},{"location":"Component%20selection/#power-budget-calculation_1","title":"Power Budget Calculation","text":"Component Voltage Range (V) Typical Voltage (V) Max Current (mA) Power (mW) PIC18F47Q10 2.3V-5.5V 3.3V 250mA 825mW Blue surface mount LED 2.8V - 3.6V 3.3V 125mA 108mW Switch 0-24 VDC 0-24 V DC 50 mA 165mW HDC1010YPAR 2.7V - 5.5V 3.3V 20mA 66mW Total (maximum) Power Consumption - 3.3V 240mA 1164mW"},{"location":"Component%20selection/#power-source-voltage-regulator-selection","title":"Power Source &amp; Voltage Regulator Selection","text":"<p>I need to ensure that this part receives the correct amperage. Due to the team planning to use 5V instead of 3.3V for this side of the circuit we then have two choices. These choices are to either use 3.3V for the whole board or to use an LDO, since it is a minimal change of 1.7V we hope that this LDO regulator may work in reducing the voltage running through my devices. I will have to construct a circuit that regulates the voltage similar to the voltage regulator lab we finished in class.</p> Solution Pros Cons LDO Regulator AMS1117-3.3V Simple, Readily available, Low noise Higher heat dissipation Switching Regulator LM2596-3.3V High efficiency, Low heat generation Bulkier, Requires additional components AP63203WU-7 Outputs exactly 3.3V, Surface mount, High efficiency Higher heat dissipation, complex/multiple parts on connection schematic <p>Rationale: The AP63203WU-7 was chosen for its precise 3.3V output, surface-mount form factor, and high efficiency, making it ideal for this embedded system.</p> <p>Conclusion This component selection ensures an efficient, low-power, and scalable design for a weather monitoring system using a PIC18F47Q10 and HDC1010YPAR temperature and humidity sensor.</p> <p>No battery is included in this system, it will be a direct connection.</p>"},{"location":"Power%20Budget/","title":"Power Budget Overview for Sensor","text":"<p>Power Budget Calculation</p> Component Voltage Range (V) Typical Voltage (V) Max Current (mA) Power (mW) PIC18F47Q10 2.3V-5.5V 3.3V 250mA 825mW Blue surface mount LED 2.8V - 3.6V 3.3V 125mA 108mW Switch 0-24 VDC 0-24 V DC 50 mA 165mW HDC1010YPAR 2.7V - 5.5V 3.3V 20mA 66mW Total (maximum) Power Consumption - 3.3V 240mA 1164mW <p>Power Source &amp; Voltage Regulator Selection</p> <p>I need to ensure that this part receives the correct amperage. Due to the team planning to use 5V instead of 3.3V for this side of the circuit we then have two choices. These choices are to either use 3.3V for the whole board or to use an LDO, since it is a minimal change of 1.7V we hope that this LDO regulator may work in reducing the voltage running through my devices. I will have to construct a circuit that regualates the voltage similar to the voltage regulator lab we finished in class. | Solution                        | Pros                                      | Cons                              | |---------------------------------|-------------------------------------------|-----------------------------------| | LDO Regulator               |                                           |            | | AMS1117-3.3V     |Simple, Readily available, Low noise  |Higher heat dissipation       | |                                 |                                           |                       | | Switching Regulator         |                                         |                                       | | LM2596-3.3V                 |  High efficiency, Low heat generation |  Bulkier, Requires additional components  | | AP63203WU-7                 |  Outputs exactly 3.3V, Surface mount, High efficiency | Higher heat dissipation, complex/multiple parts on connection schematic |</p> <p>Rationale: The AP63203WU-7 was chosen for its precise 3.3V output, surface-mount form factor, and high efficiency, making it ideal for this embedded system.</p> <p>Conclusion This component selection ensures an efficient, low-power, and scalable design for a weather monitoring system using a PIC18F47Q10 and HDC1010YPAR temperature and humidity sensor.</p> <p>No battery is included in this system, it will be a direct connection.</p>"},{"location":"Schematic%20Design/","title":"Schematic Desgin","text":"<p>Below is the Humidity and Temperature subsystem created for Team 308, Fresh Start.  The system uses the PIC microcontroller and regulates the 9V using an LDO and a switch to start the device up. It is the individual susbsystem, but in the future will need to use the same power source to charge other teamates systems. The PCB will be made to be compact with surface mount applications being the focus of this design. I also had to ensure that the surface mount chips were not too small to be used in the design due to the needs to place them down onto the actual pcb.</p> <p></p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}